//============================================================================
// Name        : masterMindMine.cpp
// Author      : Alex Agudelo, Thurston Brevett
// Version     :
// Copyright   : Your copyright notice
// Description : Mastermind: User has 10 tries to guess a 4 digit code
//============================================================================

#include <iostream>
#include <vector>
#include <cstdlib>
#include <stdio.h>
using namespace std;

class Code 
{
	public:
		Code(); // create a code with random values
		Code(const int arr[]); // create a code with passed values
		void setCode(const int arr[]); // set the code values to the array values
		void setRandomCode(); // set random values for the code
		const int getVal(const int index); // get the indexed values in a code
		const void printCode(); // print the digits in the code
		const int checkCorrect(Code gs); // check how many values are in the correct position
		const int checkIncorrect(Code gs); // check how many values are in incorrect position
		virtual ~Code(); // deconstructor stub
	protected:
		std::vector<int> cd; // code vector
};


class Response 
{
	public:
		Response(); // create a response object
		const  int getCorrect(); // return how many values are correct
		const  int getIncorrect(); // return how many values are incorrect
		void setNumCorrect( int const newNumCorrect); // set how many values are correct 
		void setNumIncorrect( int const newNumIncorrect); // set how many values are incorrect
		const void printResponse(); // print a response
		const bool checkWin(const bool announce=false); // check if this is a winning response
		const bool checkSame(const Response r); // check if a given response matches this one
		virtual ~Response();
	private:
		 int numCorrect; // number of matching values
		 int numIncorrect; // number of correct values in incorrect position
};


class Mastermind {
public:
	Mastermind();
	void humanGuess();
	Response getResponse(Code sc, Code gs);
	void playGame();
	void playSeries();
	virtual ~Mastermind();
protected:
	Code secret;
	Code guess;
	Response r1;

};

int main()
{
	// create a mastermind object
	Mastermind game1;
	// calls playGame to play a single game until the user quits
	game1.playSeries();
	// return no error
	return 0;
}

//constructor method
Mastermind::Mastermind()
{

}

//This function prompts the user to enter his guess which then stores it as a vector
void Mastermind::humanGuess()
{
	//create variable i to be used for the for loop
	int i=0;
	
	//create a temporary array that will be inputed into the .setCode function 
	// from the Code class to convert the arrary into a vector
	int tempArr[4]={0,0,0,0};
	char charArr[5]={0,0,0,0,0};
	
	
	//this inputs the user for 4 digits which then puts them in to the array
	cout << "Please type in 4 digits, make sure to press enter after each digit" << ".\n";
	while(i<4)
	{
		scanf("%s",&charArr[i]); // read in each digit as a character
		// convert to integer until termination character ( a 0)
		while(charArr[i] != 0)
		{	
			tempArr[i] = ((int)charArr[i]) - 48;	
			i++;
		}
		
	}
	//This passes the array of the 4 digits that the user entered into the setCode function of the guess object that will store the human guess as a vector
	guess.setCode(tempArr);
	
	return;
}

//this function is passed the secret and the guess and run the check correct, and check incorrect and returns the response which is the number correct and the num incorrect
//this returns a bool to main which decides whether the human guessed the write code or has to guess again
Response Mastermind::getResponse(Code sc, Code gs)
{
	// set numCorrect to the number of digits in the correct position
	r1.setNumCorrect(sc.checkCorrect(gs));
	
	// set numIncorrect to the number of digits in the incorrect position
	r1.setNumIncorrect(sc.checkIncorrect(gs));
		
	return r1;
}

void Mastermind::playGame()
{
	// number of guesses the user has entered and can enter
	int numIterations=0; const  int guesses = 10;

	// create a new code for a new game
	secret.setRandomCode();
	
	// reset response
	r1.setNumCorrect(0); r1.setNumIncorrect(0);
		
	// print out the secret code to the screen for testing purposes
	cout << "The secret code is "; secret.printCode();
	
	while(!(r1.checkWin(numIterations>0)) && (numIterations < guesses))
	{
		// prompt user for a guess
		humanGuess();

		// receive and print response
		// note: getResponse returns a response object that is printed by printResponse
		getResponse(secret,guess).printResponse();

		// move to next guess
		numIterations++;
	}
	
	// shame losers for losing
	if(numIterations == guesses)	{ cout << "You have had 10 guesses, now you lost.\n"; }
	
	return;
}

void Mastermind::playSeries()
{
	int playGameAgain=1; // whether or not to continue playing
	
	while(playGameAgain)
	{
		// play a game
		playGame();
		
		// prompts user to play again
		cout << "Do you want to play again? 1 = yes, 2 =no.\n";
		
		// receive the response for the user
		cin >> playGameAgain;
		
		// switch case on the decision of playing again or not
		switch (playGameAgain)
		{
		case 1: // they want to play again	
			// prints out that the happiness that is the user playing again and end case
			cout << "YAYAY try again. \nRestarting game, Creating new Secret code!\n";	break;
			

		case 2: // the user wants to stop playing
			// prints out the saddiness that is the game being quit
			cout << "OK fine you had enough, game quitting.\n";
			// change response to boolean false and end case
			playGameAgain =  0; break;
			
			
		default: // an inappropriate response was given
			//prompts user that the input was invalid and end case
			cout << "That is not a correct input, try again.\n"; break;
		
		}
	}	
	// return when finished
	return;
}

Mastermind::~Mastermind() {
	/// TODO Auto-generated destructor stub
}



// creates a default response
Response::Response()
{
	//sets the numCorrect and numIncorrect to -1 for debugging purposes
	//if either of them output -1, then those numbers haven't been touched
	numCorrect = -1;
	numIncorrect = -1;
}

//get function that returns the number of Correct positions
const int Response::getCorrect()
{
	return numCorrect;
}

//get function that resturns the number of Incorrect positions
const int Response::getIncorrect()
{
	return numIncorrect;
}

//set function to manually set the value of numCorrect
void Response::setNumCorrect(int const newNumCorrect)
{
	numCorrect = newNumCorrect; return;
}

//set function to manually set the value of incorrect
void Response::setNumIncorrect(int const newNumIncorrect)
{
	numIncorrect = newNumIncorrect; return;
}

// print the response
const void Response::printResponse()
{
	cout << "There are "<<numCorrect<<" digits in the correct position and "<<numIncorrect<<" in the wrong position.\n";
}

//This function checks to see if the two codes are the same and outputs true if they are the same
//and outputs false if they are different
const bool Response::checkSame(Response r)
{
	return (numCorrect == r.getCorrect()) && (numIncorrect == r.getIncorrect());
}

const bool Response::checkWin(const bool announce)
{
	//to check if the user won, it checks to see if the numCorrect is 4
	if(!announce) { return numCorrect==4;	}
	else
	{
	if(numCorrect == 4)
		{
			//returns true which indicates the human guessed the code
			cout << "You have guessed the right code!!!! You won!! now play again...." << ".\n";
			return true;
		}
		else 
		{
			//returns false which indicates that the human as not guessed the secret code yet
			cout << "Well you guessed it wrong...try again...\n";
			return false;
		}
	}
}

// deconstructor stub
Response::~Response()
{	/* TODO Auto-generated destructor stub */ }


 // create a code with random values
Code::Code()
{
	setRandomCode();
}

// create a code with passed values
Code::Code(const int arr[])
{
	 setCode(arr);
}


// set the code values to the array values
void Code::setCode(const int arr[])
{
	cd.resize(4);
	for(int ii=0;ii<4;ii++)
	{
		cd[ii] = arr[ii];
	}
}

// set random values for the code
void Code::setRandomCode()
{
	cout << "Setting Random Code for Secret Code.\n";
	cd.resize(4);
	for(int ii=0;ii<4;ii++)
	{
		 cd[ii] = (int) rand() % 6;
	}
}

// get the indexed values in a code
const int Code::getVal(const int index)
{
	return cd[index];
}


// print the digits in the code
const void Code::printCode()
{
	for(int ii=0;ii<4;ii++)
	{
		cout << cd[ii];
	}
	cout << "\n";
}

// Checks the number of correct guesses which involve the guess having a correct number
// in the correct position. Assumes that the parameter passed to the function is the guess.
const int Code::checkCorrect(Code gs)
{
	// count the number of equal values in corresponding position
	int temp=0;
	for(int ii=0;ii<4;ii++)
	{
		if(cd[ii]==gs.getVal(ii))
		{
			temp++;
		}
	}
	return temp;
}

// Checks the number of incorrect guesses which involve the guess having a correct number
// in the wrong position. Only reports a maximum of one correct value for each position in
// the code. Assumes that the parameter passed to the function is the guess.
const int Code::checkIncorrect(Code gs)
{
	// create image of guess corresopnding to code vectors
	 int image[4] = {0,0,0,0};

	// iteratively check values from the secret
	for(int ii=0;ii<4;ii++) // ii is the secret index
	{
		// check only if secret index isn't a correct match
		if(cd[ii] != gs.getVal(ii))
		{
			// iteratively compare to values from the guess
			for(int jj=0;jj<4;jj++) // jj is the guess index
			{
				// ignore corresponding numbers and already matched numbers in the guess
				if((jj!=ii) && (!image[jj]))
				// if numbers match, denote in the image and move to next index in secret
				{
					if(cd[ii] == gs.getVal(jj))
					{
						image[jj] = 1; break;
					}
				}
			}
		}
		else 
		{ image[ii]=-1; } // indicate matches by setting image to -1
	}

	
	// count the number of denoted incorrects in the image
	int temp=0; for(int kk=0;kk<4;kk++) { if(image[kk]>0) {temp++;} }
	
	// return number of matches
	return temp;
}

// deconstrucor stub
Code::~Code() {}	// TODO Auto-generated destructor stu

                                       
